#!/usr/bin/env python3

# This script is used to reformat multifasta and put it according to gisaid specs.
# Additionally, this script is intended to filter which samples should be included on the final multifasta
# Modified by Rodrigo Guarischi Sousa on Sep 15, 2021
# version 0.1

### PREAMBLE ###################################################################################### 

# Settings for environment 
import io
from Bio import SeqIO
import sys
import traceback
import warnings
import argparse
import os
import shutil

### FUNCTIONS #####################################################################################

# Turns the input key file into a dictionary. May be memory intensive
def getKeys(keyFile):

    with open(keyFile, "r") as kfh:
        keys = {}
        for line in kfh:
            line = line.rstrip("\n")
            line = line.lstrip(">")
            lineSplit = line.split("\t")
            keys.update({lineSplit[0]:lineSplit[1]})

    return keys

# Takes a list of strings in a text file (one per line) and retreives them and their sequences from a provided multifasta
def main():
    
    # Parse arguments from the commandline:
    parser = argparse.ArgumentParser(description='Retrieve one or more fastas from a given multifasta, change sequence IDs and save as individual fasta files.')
    parser.add_argument(
        '-f',
        '--fasta',
        action='store',
        required=True,
        help='The multifasta to search.')
    parser.add_argument(
        '-k',
        '--keys',
        action='store',
        required=True,
        help='A 2-column file with format "<CURRENT_ID><tab><NEW_ID>" to search the multifasta for. Entries should be one per line and CURRENT_ID must be an exact match.')
    parser.add_argument(
        '-o',
        '--outdir',
        action='store',
        required=True,
        help='Output dir where all fasta files should be written. This folder will be compressed on a ZIP in the end of processing.')
    parser.add_argument(
        '-v',
        '--verbose',
        action='store_true',
        help='Set whether to print the key list out before the fasta sequences. Useful for debugging.')
    
    # Parse argument list
    args = parser.parse_args()

    # Rename args to enable them to be provided to the getKeys function:
    keyFile = args.keys
    inFile = args.fasta
    outDir = args.outdir

### DATA ANALYSIS #################################################################################

# Extract fasta files by their descriptors stored in a separate file.

    # Checks if output directory exists 
    if not os.path.exists(outDir):
        os.makedirs(outDir)
    else:
        sys.exit("\n\tERROR: Folder '" + outDir + "' exists. Delete folder manually or choose another output folder name before continue.\n")

    # Call getKeys() to create the tuple of keys from the provided file:
    try:
        keys = getKeys(keyFile)
    except IOError:
        keys = args.keys
    
    # Verbose option just prints key list
    if args.verbose is not False:
        print('Fetching the following keys from: ' + inFile)
        for key in keys.keys():
            print( key )
    
    # For each sequence in the multifasta, check if it's in the keys dictionary. If so, change sequence ID and save fasta file
    for seq in SeqIO.parse(inFile, 'fasta'):
        if seq.id in keys:
            genovID = seq.id
            seq.id = keys[genovID]
            seq.description = keys[genovID]
            # print(seq.format("fasta"))
            SeqIO.write(seq, "./" + outDir + "/" + genovID + ".fasta", "fasta")
        else:
            print("Could not find id: " + seq.id)
    
    # Compress directory with fasta files to save space
    shutil.make_archive(outDir, 'zip', outDir)
    
    # Delete folder to leave only the zip file
    try:
        shutil.rmtree(outDir)
    except OSError as e:
        print("Error: %s - %s." % (e.filename, e.strerror))

if __name__ == "__main__":
    main()
